import os
from background import keep_alive #–∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
import pip
pip.main(['install', 'aiogram'])
import time
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.types.message import ContentType
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


logging.basicConfig(level=logging.INFO)

TOKEN = '6070617064:AAEp2BEdWtlQYq6GsDNvAV7KPv8yRrhVCAs'
CHAT_ID = '-1001609605973'

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    name = State()
    birth_date = State()
    phone_number = State()
    # email = State()
    social_links = State()
    education_status = State()
    education_details = State()
    # has_work_book = State()
    # has_medical_book = State()
    is_our_guest = State()
    user_link = State()
    job_preferences = State()
    last_job = State()
    dismissal_reason = State()
    why_us = State()
    # quick_learning = State()
    main_dream = State()
    favorite_drink = State()
    # hobby = State()
    # achievment = State()
    new_acquaintances = State()
    emotions = State()
    work_schedule = State()
    last_job_recommendation = State()
    know_vacancy = State()
    if_you_small = State()
    remark = State()
    what_closely = State()
    freeze_pinguin = State()
    # why_you = State()
    theft = State()
    two_employers = State()
@dp.message_handler(commands='help')
async def help_cmd_handler(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç-–∞–Ω–∫–µ—Ç–∞ –¥–ª—è —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤  Coffee Like KMS, –µ—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø–∏—à–∏ –∏—Ö –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∫–µ—Ç—ã
@dp.message_handler(commands='start')
async def start_cmd_handler(message: types.Message):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
    """
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–µ—Å–ª–∏ –±—ã–ª–∞)
    await Form.name.set()
    await message.reply("–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –∞–Ω–∫–µ—Ç–∞ –≤ Coffee Like KMS –ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ —á–µ—Å—Ç–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è. –ü—Ä–æ—è–≤–∏ —Å–º–µ–∫–∞–ª–∫—É!\n –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é: ", 
                        reply_markup=types.ReplyKeyboardRemove())
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã
@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    await Form.next()
    await message.reply("–í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì: ")

@dp.message_handler(state=Form.birth_date)
async def process_birth_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['birth_date'] = message.text

    await Form.next()
    await message.reply("–í–≤–µ–¥–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")

@dp.message_handler(state=Form.phone_number)
async def process_phone_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone_number'] = message.text

#     await Form.next()
#     await message.reply("–í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã: ")

# @dp.message_handler(state=Form.email)
# async def process_email(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['email'] = message.text

    await Form.next()
    await message.reply("–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –í–ö, Instagram, Telegram (–º—ã –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç–∏–º –ø–æ—Å—Ç–∞–≤–∏—Ç—å üëç):")

@dp.message_handler(state=Form.social_links)
async def process_social_links(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['social_links'] = message.text

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ReplyKeyboardMarkup –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–£—á—É—Å—å –æ—á–Ω–æ"), KeyboardButton("–£—á—É—Å—å –∑–∞–æ—á–Ω–æ"), KeyboardButton("–ó–∞–∫–æ–Ω—á–∏–ª/–ù–µ —É—á—É—Å—å"))

    await Form.next()
    await message.reply("–ù–∞ –º–æ–º–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã —Ç—ã:", reply_markup=markup)


@dp.message_handler(state=Form.education_status)
async def process_current_status(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['education_status'] = message.text

    await Form.next()
    await message.reply("–ù–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞.",
                        reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(state=Form.education_details)
async def process_education_details(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['education_details'] = message.text
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç"))
#     await Form.next()
#     await message.reply("–ù–∞–ª–∏—á–∏–µ —Ç—Ä—É–¥–æ–≤–æ–π –∫–Ω–∏–∂–∫–∏: ", reply_markup=markup)

# @dp.message_handler(state=Form.has_work_book)
# async def process_work_book(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['has_work_book'] = message.text
#     markup = ReplyKeyboardMarkup(resize_keyboard=True)
#     markup.add(KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç"))
#     await Form.next()
#     await message.reply("–ù–∞–ª–∏—á–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–Ω–∏–∂–∫–∏: ", reply_markup=markup)

# @dp.message_handler(state=Form.has_medical_book)
# async def process_medical_book(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['has_medical_book'] = message.text
#     markup = ReplyKeyboardMarkup(resize_keyboard=True)
#     markup.add(KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç"))

    await Form.next()
    await message.reply("–Ø–≤–ª—è–µ—à—å—Å—è –ª–∏ —Ç—ã –Ω–∞—à–∏–º –≥–æ—Å—Ç–µ–º: ",reply_markup=markup)

@dp.message_handler(state=Form.is_our_guest)
async def process_is_guest(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['is_our_guest'] = message.text

    await Form.next()
    await message.reply("–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–±–æ—Ç—ã?",
                        reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(state=Form.user_link)
async def start_command(message: types.Message, state: FSMContext):
    user_link = f'https://t.me/{message.from_user.username}'
    async with state.proxy() as data:
        data['user_link'] = user_link
    await Form.next()
    await message.reply("–ò–¥—ë–º –¥–∞–ª—å—à–µ ?")

@dp.message_handler(state=Form.job_preferences)
async def process_job_preferences(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['job_preferences'] = message.text

    await Form.next()
    await message.reply("–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã?(–Ω–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è)")

@dp.message_handler(state=Form.last_job)
async def process_last_job(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['last_job'] = message.text

    await Form.next()
    await message.reply("–ü—Ä–∏—á–∏–Ω–∞ —É—Ö–æ–¥–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã?")

@dp.message_handler(state=Form.dismissal_reason)
async def process_dismissal_reason(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['dismissal_reason'] = message.text

    await Form.next()
    await message.reply("–ü–æ—á–µ–º—É —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ—Ñ–µ –∏ –≤—ã–±–∏—Ä–∞–µ—à—å –∏–º–µ–Ω–Ω–æ –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é? (–ú—ã –∫–æ–Ω–µ—á–Ω–æ –¥–æ–≥–∞–¥—ã–≤–∞–µ–º—Å—è, –Ω–æ –≤—Å–µ –∂–µ)")

@dp.message_handler(state=Form.why_us)
async def process_why_us(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['why_us'] = message.text
#     markup = ReplyKeyboardMarkup(resize_keyboard=True)
#     markup.add(KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç"), KeyboardButton("–í–æ–∑–º–æ–∂–Ω–æ"), KeyboardButton("–î—Ä—É–≥–æ–µ(–Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º)"))
    

#     await Form.next()
#     await message.reply("–õ–µ–≥–∫–æ –ª–∏ —Ç—ã –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—à—å –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –±—ã—Å—Ç—Ä–æ–æ–±—É—á–∞–µ–º?",reply_markup=markup)

# @dp.message_handler(state=Form.quick_learning)
# async def process_quick_learning(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['quick_learning'] = message.text    

    await Form.next()
    await message.reply("–ö–∞–∫–∞—è —Ç–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –º–µ—á—Ç–∞?",
                        reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(state=Form.main_dream)
async def process_main_dream(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['main_dream'] = message.text

    await Form.next()
    await message.reply("–ö–∞–∫–æ–π —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫?")

@dp.message_handler(state=Form.favorite_drink)
async def process_favorite_drink(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['favorite_drink'] = message.text

#     await Form.next()
#     await message.reply("–ö–∞–∫–æ–µ —Ç–≤–æ—ë —É–≤–ª–µ—á–µ–Ω–∏–µ, —Ö–æ–±–±–∏?")

# @dp.message_handler(state=Form.hobby)
# async def process_hobby(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['hobby'] = message.text

#     await Form.next()
#     await message.reply("–ö–∞–∫–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ —Ç—ã –≥–æ—Ä–¥–∏—à—å—Å—è?")



# @dp.message_handler(state=Form.achievment)
# async def process_achievment(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['achievment'] = message.text

    await Form.next()
    await message.reply("–¢—ã –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–¥–∏—à—å –æ–±—â–∏–π —è–∑—ã–∫ —Å –ª—é–¥—å–º–∏, –∑–∞–≤–æ–¥–∏—à—å –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")

@dp.message_handler(state=Form.new_acquaintances)
async def process_new_acquaintances(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['new_acquaintances'] = message.text

    await Form.next()
    await message.reply("–ë—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ —Å–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏?")

@dp.message_handler(state=Form.emotions)
async def process_emotions(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['emotions'] = message.text

    await Form.next()
    await message.reply("–ñ–µ–ª–∞–µ–º—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã?")


@dp.message_handler(state=Form.work_schedule)
async def process_work_schedule(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['work_schedule'] = message.text

    await Form.next()
    await message.reply("–ö—Ç–æ –º–æ–∂–µ—Ç –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ–±—è —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã? (—Ç–µ–ª–µ—Ñ–æ–Ω, –§–ò–û)")


@dp.message_handler(state=Form.last_job_recommendation)
async def process_last_job_recommendation(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['last_job_recommendation'] = message.text

    await Form.next()
    await message.reply("–ö–∞–∫ —Ç—ã —É–∑–Ω–∞–ª –æ –≤–∞–∫–∞–Ω—Å–∏–∏?")


@dp.message_handler(state=Form.know_vacancy)
async def process_know_vacancy(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['know_vacancy'] = message.text

    await Form.next()
    await message.reply("–ü—Ä–µ–¥—Å—Ç–∞–≤—å: —Ç—ã –≤ –∫–æ–º–Ω–∞—Ç–µ, —Ç–∞–º —Å—Ç–æ–∏—Ç –±–æ–ª—å—à–æ–π —Å—Ç–æ–ª, –∞ –Ω–∞ —Å—Ç–æ–ª–µ —Å—Ç–æ–∏—Ç —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –µ–¥–∞. –¢—ã –¥–æ –∂—É—Ç–∏ –≥–æ–ª–æ–¥–Ω—ã–π. –ù–æ –µ—Å—Ç—å –æ–¥–Ω–æ ""–Ω–æ"", —Ç—ã –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ä–æ—Å—Ç–∞, —Ä–∞–∑–º–µ—Ä–æ–º —Å –º—ã—à–∫—É. –ß—Ç–æ —Ç—ã –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å?")



@dp.message_handler(state=Form.if_you_small)
async def process_if_you_small(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['if_you_small'] = message.text

    await Form.next()
    await message.reply("–ö–∞–∫ —Ç—ã –æ—Ç—Ä–µ–∞–≥–∏—Ä—É–µ—à—å –Ω–∞ –∑–∞–º–µ—á–∞–Ω–∏–µ –∫–æ–ª–ª–µ–≥–∏ –Ω–∞ —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É?")

@dp.message_handler(state=Form.remark)
async def process_remark(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['remark'] = message.text
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
    options = ["–ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∏ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∏ —Ä–µ—à–µ–Ω–∏—è", "–†–∞–±–æ—Ç–∞—Ç—å –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏/—Ä–µ–≥–ª–∞–º–µ–Ω—Ç—É", "–î—Ä—É–≥–æ–µ (–Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º)"]
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for option in options:
        markup.add(KeyboardButton(option))
    
    await Form.next()
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:", reply_markup=markup)



@dp.message_handler(state=Form.what_closely)
async def process_what_closely(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['what_closely'] = message.text

    await Form.next()
    await message.reply("–¢—ã –ø—Ä–∏—Ö–æ–¥–∏—à—å –¥–æ–º–æ–π, –∏ –≤–∏–¥–∏—à—å –≤ —Å–≤–æ–µ–π –º–æ—Ä–æ–∑–∏–ª–∫–µ –ø–∏–Ω–≥–≤–∏–Ω–∞. –¢–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è?"
                        ,reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state=Form.freeze_pinguin)
async def process_freeze_pinguin(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['freeze_pinguin'] = message.text

#     await Form.next()
#     await message.reply("–ü–æ—á–µ–º—É –º—ã –¥–æ–ª–∂–Ω—ã –≤–∑—è—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è?")


# @dp.message_handler(state=Form.why_you)
# async def process_why_you(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['why_you'] = message.text

    await Form.next()
    await message.reply("–ö–æ–ª–ª–µ–≥–∞ —É–∫—Ä–∞–ª/–∞ –∏–º—É—â–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–∏, —Ç—ã ‚Äî —Å–≤–∏–¥–µ—Ç–µ–ª—å. –ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å —Å —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π?")

@dp.message_handler(state=Form.theft)
async def process_theft(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['theft'] = message.text

    await Form.next()
    await message.reply("–¢–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ —Ä–∞–±–æ—Ç—É –¥–≤–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è. –ö–∞–∫ –±—É–¥–µ—à—å –≤—ã–±–∏—Ä–∞—Ç—å?")


@dp.message_handler(state=Form.two_employers)
async def process_two_employers(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['two_employers'] = message.text

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        text = "–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:\n\n"
        text += f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º: {data.get('user_link')}\n \n"
        text += f"–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è: {data.get('name')}\n \n"
        text += f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data.get('birth_date')}\n \n"
        text += f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data.get('phone_number')}\n \n"
        # text += f"–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã: {data.get('email')}\n \n"
        text += f"–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏: {data.get('social_links')}\n \n"
        text += f"–ù–∞ –º–æ–º–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã —Ç—ã: {data.get('education_status')}\n \n"
        text += f"–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ: {data.get('education_details')}\n \n"
        # text += f"–¢—Ä—É–¥–æ–≤–∞—è –∫–Ω–∏–∂–∫–∞: {data.get('has_work_book')}\n \n"
        # text += f"–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–Ω–∏–∂–∫–∞: {data.get('has_medical_book')}\n \n"
        text += f"–ù–∞—à –≥–æ—Å—Ç—å: {data.get('is_our_guest')}\n \n"
        text += f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤ —Ä–∞–±–æ—Ç–µ: {data.get('job_preferences')}\n \n"
        text += f"–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: {data.get('last_job')}\n \n"
        text += f"–ü—Ä–∏—á–∏–Ω–∞ —É—Ö–æ–¥–∞: {data.get('dismissal_reason')}\n \n"
        text += f"–ü–æ—á–µ–º—É —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ—Ñ–µ –∏ —É –Ω–∞—Å: {data.get('why_us')}\n \n"
        # text += f"–ë—ã—Å—Ç—Ä–æ–æ–±—É—á–∞–µ–º–æ—Å—Ç—å: {data.get('quick_learning')}\n \n"
        text += f"–ì–ª–∞–≤–Ω–∞—è –º–µ—á—Ç–∞: {data.get('main_dream')}\n \n"
        text += f"–õ—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫: {data.get('favorite_drink')}\n \n"
        # text += f"–•–æ–±–±–∏: {data.get('hobby')}\n \n"
        # text += f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {data.get('achievment')}\n \n"
        text += f"–õ–µ–≥–∫–æ –∑–∞–≤–æ–¥–∏—à—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞: {data.get('new_acquaintances')}\n \n"
        text += f"–°–ª–æ–∂–Ω–æ –ª–∏ —Å–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏: {data.get('emotions')}\n \n"
        text += f"–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: {data.get('work_schedule')}\n \n"
        text += f"–ö—Ç–æ –º–æ–∂–µ—Ç –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Å –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã: {data.get('last_job_recommendation')}\n \n"
        text += f"–ö–∞–∫ —É–∑–Ω–∞–ª –æ –≤–∞–∫–∞–Ω—Å–∏–∏: {data.get('know_vacancy')}\n \n"
        text += f"–ö–æ–º–Ω–∞—Ç–∞, —Å—Ç–æ–ª, –µ–¥–∞, —Ç—ã –º–∞–ª–µ–Ω—å–∫–∏–π: {data.get('if_you_small')}\n \n"
        text += f"–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∑–∞–º–µ—á–∞–Ω–∏–µ –∫–æ–ª–ª–µ–≥–∏: {data.get('remark')}\n \n"
        text += f"–ß—Ç–æ –±–ª–∏–∂–µ: {data.get('what_closely')}\n \n"
        text += f"–ü–∏–Ω–≥–≤–∏–Ω –≤ –º–æ—Ä–æ–∑–∏–ª–∫–µ: {data.get('freeze_pinguin')}\n \n"
        # text += f"–ü–æ—á–µ–º—É –¥–æ–ª–∂–Ω—ã –≤–∑—è—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è: {data.get('why_you')}\n \n"
        text += f"–ö–æ–ª–ª–µ–≥–∞ –≤–æ—Ä, —Ç—ã —Å–≤–∏–¥–µ—Ç–µ–ª—å, –≤–∞—Ä–∏–∞–Ω—Ç—ã: {data.get('theft')}\n \n"
        text += f"–ü—Ä–µ–¥–ª–æ–∂–∏–ª–∏ —Ä–∞–±–æ—Ç—É –¥–≤–æ–µ, –∫–∞–∫ –±—É–¥–µ—à—å –≤—ã–±–∏—Ä–∞—Ç—å: {data.get('two_employers')}\n \n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –≤ —á–∞—Ç –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        await bot.send_message(chat_id="-1001609605973", text=text)
        await state.finish()

    await message.reply("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É –≤ Coffee Like KMS, –∫—Ä–∞—Å–∞–≤—á–∏–∫! –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –≤ —Ç–≤–æ—é –¥–≤–µ—Ä—å –ø–æ—Å—Ç—É—á–∞—Ç—Å—è... –ê —Ç–æ—á–Ω–µ–µ, —Å–≤—è–∂—É—Ç—Å—è —Å —Ç–æ–±–æ–π –≤ WhatsApp, Telegram –∏–ª–∏ –ø–æ–∑–≤–æ–Ω—è—Ç, –µ—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞. –•–æ—Ä–æ—à–µ–≥–æ —Ç–µ–±–µ –¥–Ω—è –∏ –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!")

keep_alive()
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)


   
